---
title: "Figure1"
author: "Rahul Samrat"
format: html
server: shiny
---

## Figure 1: Overview of Soil Lipid Categories & Classes in the ClimgGrass Experiment

This Scirpt provide the scipt for plotting the Stacker bar plot of distribtuion and count of lipid compounds.

## Load necessary libraries

```{r}
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(forcats)
library(RColorBrewer)
```

## Load the data

```{r}
file_path <- "Figure1-data.xlsx"  # Update this with the actual file path
df <- read_excel(file_path)

```

```{r}

```

## Prepare the data for plotting Stacked bar plot

```{r}
subclass_counts <- df %>%
  count(Class, Subclass) %>%
  arrange(Class, desc(n))

# Summarize subclass counts
total_subclass_counts <- subclass_counts %>%
  group_by(Class, Subclass) %>%
  summarise(TotalCount = sum(n)) %>%
  arrange(Class, desc(TotalCount))

# Create custom labels for the legend with Class and Subclass
total_subclass_counts <- total_subclass_counts %>%
  mutate(Label = paste(Class, "-", Subclass, "(", TotalCount, ")", sep = ""))

# Remove duplicates
total_subclass_counts <- total_subclass_counts[!duplicated(total_subclass_counts$Label), ]

# Convert to wide format for plotting
sorted_subclass_counts <- subclass_counts %>%
  pivot_wider(names_from = Subclass, values_from = n, values_fill = list(n = 0))

# Convert to long format for ggplot
df_long <- sorted_subclass_counts %>%
  pivot_longer(-Class, names_to = "Subclass", values_to = "Count")

# Ensure that Subclass is a factor and ordered by Class and Subclass within Class
df_long$Subclass <- factor(df_long$Subclass, levels = unique(total_subclass_counts$Subclass))
df_long$Class <- factor(df_long$Class, levels = unique(total_subclass_counts$Class))

# Generate a color palette with enough colors for the unique subclasses
n_colors <- length(unique(df_long$Subclass))
colors <- brewer.pal(n = min(n_colors, 12), name = "Paired")
if (n_colors > 12) {
  colors <- colorRampPalette(colors)(n_colors)
}
```

## Create the plot

```{r}

p <- ggplot(df_long, aes(x = Class, y = Count, fill = Subclass)) +
  geom_bar(stat = "identity", color = "black") +
  labs(title = "Stacked Bar Plot of Lipid Class",
       x = "Class", y = "Count") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    axis.title.x = element_text(size = 12, face = "bold"),
    axis.title.y = element_text(size = 12, face = "bold"),
    axis.text.x = element_text(angle = 0, hjust = 1),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank(),
    legend.position = "bottom",
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 8),
    legend.box = "vertical"
  ) +
  guides(fill = guide_legend(title = "Subclass", ncol = 5, label.theme = element_text(size = 9))) +
  scale_fill_manual(values = setNames(colors, unique(df_long$Subclass)),
                    labels = setNames(total_subclass_counts$Label, total_subclass_counts$Subclass))
# Save the plot as an SVG file
ggsave("stacked_bar_plot.pdf", plot = p, width = 12, height = 11.69, units = "in")
print(p)
```

## Lipid Annotation Comparision Library-Search v/s Prediction-based approach

```{r}
# Load necessary libraries
library(ggplot2)
library(readxl)

# Load the data
file_path <- "Figure1-data.xlsx"
data <- read_excel(file_path, sheet = "Sheet1")

# Create columns to indicate presence of value in 'LipidSearch' and 'SiriusID'
data$LipidSearch_Present <- ifelse(!is.na(data$LipidSearch), 1, 0)
data$SiriusID_Present <- ifelse(!is.na(data$SiriusID), 1, 0)

# Summarize the data by 'Class'
summarized_data <- aggregate(cbind(LipidSearch_Present, SiriusID_Present) ~ Class, data, sum)

# Melt the data for ggplot2
library(reshape2)
melted_data <- melt(summarized_data, id.vars = "Class")

```

```{r}
# Create the plot
p <- ggplot(melted_data, aes(x = Class, y = value, fill = variable)) +
  geom_bar(stat = "identity", color = "black", position = position_dodge(), width = 0.7) +
  geom_text(aes(label = value), vjust = -0.5, position = position_dodge(0.7), size = 3.5) +
  scale_fill_manual(values = c("skyblue", "salmon"), labels = c("LipidSearch", "SiriusID")) +
  labs(title = "Presence of LipidSearch and SiriusID by Class",
       x = "Class",
       y = "Count",
       fill = "") +
  theme_minimal(base_size = 15) +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 1, vjust = 1),
    plot.title = element_text(hjust = 0.5, face = "bold"),
    legend.position = "top",
    panel.background = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line = element_line(colour = "black")
  )
print(p)

# Save the plot as an SVG file
ggsave("plot.pdf", plot = p, width = 12, height = 8, device = "pdf")

```

```{r}
library(readxl)
library(VennDiagram)
library(grid)

# Read data
file_path <- "Figure1-data.xlsx"
data <- read_excel(file_path, sheet = "Sheet1")

# Filter data
lipidsearch_positive <- na.omit(as.character(data$LipidSearch[data$Mode == "Positive"]))
lipidsearch_negative <- na.omit(as.character(data$LipidSearch[data$Mode == "Negative"]))
siriusid_positive <- na.omit(as.character(data$SiriusID[data$Mode == "Positive"]))
siriusid_negative <- na.omit(as.character(data$SiriusID[data$Mode == "Negative"]))

# Combine sets
lipidsearch_combined <- unique(c(lipidsearch_positive, lipidsearch_negative))
siriusid_combined <- unique(c(siriusid_positive, siriusid_negative))

# Calculate overlaps
overlap <- intersect(lipidsearch_combined, siriusid_combined)

# Calculate percentages
total <- length(unique(c(lipidsearch_combined, siriusid_combined)))
lipidsearch_percent <- round(length(lipidsearch_combined) / total * 100)
siriusid_percent <- round(length(siriusid_combined) / total * 100)
overlap_percent <- round(length(overlap) / total * 100)

# Create the Venn diagram
venn.plot <- draw.pairwise.venn(
  area1 = length(lipidsearch_combined),
  area2 = length(siriusid_combined),
  cross.area = length(overlap),
  category = c("Library-search", "Prediction-based"),
  fill = c("white", "skyblue"),
  alpha = c(0.5, 0.5),
  euler.d = TRUE,
  scaled = TRUE,
  ext.pos = 30,
  ext.dist = -0.05,
  ext.length = 0.85,
  ext.line.lwd = 2,
  ext.line.lty = "solid",
  cat.cex = 1.2,
  cat.pos = c(180, 0),
  cat.dist = 0.05,
  cat.fontface = "bold",
  rotation.degree = 0,
  lwd = 2
)

# Function to add annotations
add_annotations <- function() {
  # LipidSearch annotation
  grid.text(
    paste0("LipidSearch\nPositive: ", length(lipidsearch_positive),
           "\nNegative: ", length(lipidsearch_negative)),
    x = 0.3, y = 0.4, just = "left", gp = gpar(col = "black", fontsize = 10)
  )

  # SiriusID annotation
  grid.text(
    paste0("SiriusID\nPositive: ", length(siriusid_positive),
           "\nNegative: ", length(siriusid_negative)),
    x = 0.7, y = 0.4, just = "right", gp = gpar(col = "black", fontsize = 10)
  )

  # Overlap annotation
  grid.text(
    paste0("Overlap\nPositive: ", length(intersect(lipidsearch_positive, siriusid_positive)),
           "\nNegative: ", length(intersect(lipidsearch_negative, siriusid_negative))),
    x = 0.5, y = 0.1, gp = gpar(col = "black", fontsize = 10)
  )

  # Add percentages
  grid.text(paste0(length(setdiff(lipidsearch_combined, siriusid_combined)), "\n(", lipidsearch_percent, "%)"),
            x = 0.25, y = 0.7, gp = gpar(col = "black", fontsize = 12))
  grid.text(paste0(length(setdiff(siriusid_combined, lipidsearch_combined)), "\n(", siriusid_percent, "%)"),
            x = 0.75, y = 0.7, gp = gpar(col = "black", fontsize = 12))
  grid.text(paste0(length(overlap), "\n(", overlap_percent, "%)"),
            x = 0.5, y = 0.5, gp = gpar(col = "black", fontsize = 12))

  # Add title
  grid.text("Combined Overlap between LipidSearch and SiriusID with Modes Annotated",
            x = 0.5, y = 0.95, gp = gpar(fontface = "bold", fontsize = 14))
}

# Create and save the plot
png("venn_diagram_improved.png", width = 800, height = 600)
grid.newpage()
grid.draw(venn.plot)
add_annotations()
dev.off()

# Display the plot in R
grid.newpage()
grid.draw(venn.plot)
add_annotations()
```
